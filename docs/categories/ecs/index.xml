<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ECS on MatLoverによるMatlab以外のブログ</title>
    <link>http://localhost:1313/mblog/categories/ecs/</link>
    <description>Recent content in ECS on MatLoverによるMatlab以外のブログ</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 13 Dec 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/mblog/categories/ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker composeでAWS ECSにデプロイするときのtips</title>
      <link>http://localhost:1313/mblog/posts/docker-compose%E3%81%A7aws-ecs%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AEtips/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/mblog/posts/docker-compose%E3%81%A7aws-ecs%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AEtips/</guid>
      <description>&lt;p&gt;docker composeを使ってAWSのECSにアプリをデプロイ可能ですが、もしかすると役立つものがあるかもしれないのでメモを残しておきます。&#xA;作業したのが半年前なので少し情報が古いかもしれないのです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;awsのサービスへのアクセス権限周り&#34;&gt;AWSのサービスへのアクセス権限周り&lt;/h2&gt;&#xA;&lt;p&gt;ECSのタスクにAWSのサービスへのアクセス権限を与える場合はdocker-compose.ymlに次のように記述すれば良いです（下記はSQSのフルアクセスの例）。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;service:&#xA;  api: &#xA;    x-aws-policies:&#xA;      - &amp;#34;arn:aws:iam::aws:policy/AmazonSQSFullAccess&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;awsのsecretの読み込み&#34;&gt;AWSのsecretの読み込み&lt;/h2&gt;&#xA;&lt;p&gt;secretとの連携はdocker-compose.ymlに次のように記述します。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;secrets:&#xA;  sample_secret:&#xA;    name: &amp;#34;シークレットのARN&amp;#34;&#xA;    external: true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;また、読み込ませたいコンテナにも設定を追加します。例えば次のようにします。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;service:&#xA;  api: &#xA;    secrets:&#xA;      - sample_secret&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コンテナからは/run/secrets/sample_secretというパスを参照できるようになっており、この中身がsecretの値になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;gpuインスタンス&#34;&gt;GPUインスタンス&lt;/h2&gt;&#xA;&lt;p&gt;特に何も指定しない場合、FARGATE上にECSのタスクが展開されます。&#xA;GPUインスタンスを使いたい場合おそらく2つ選択肢があります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.docker.com/blog/deploy-gpu-accelerated-applications-on-amazon-ecs-with-docker-compose/&#34;&gt;https://www.docker.com/blog/deploy-gpu-accelerated-applications-on-amazon-ecs-with-docker-compose/&lt;/a&gt; を参考にgpuの記述をdocker-compose.ymlに追加&lt;/li&gt;&#xA;&lt;li&gt;docker compose convertを使ってCloudFormationテンプレートを出力し、それを編集してGPUインスタンスが使えるようにする。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;自分は後者を選択しました。&#xA;というのも、複数のタスクを1つのGPUインスタンス上で実行したかったのですが、前者の方法だと1インスタンスにつき1タスクという制限がありました。&#xA;このため、後者を採用し、かつ次の変更を加えています。&lt;/p&gt;&#xA;&lt;h3 id=&#34;gpuインスタンスのruntimeの設定&#34;&gt;GPUインスタンスのruntimeの設定&lt;/h3&gt;&#xA;&lt;p&gt;1インスタンスに1タスクの問題は次のようにCloudFormationテンプレートのLaunchConfigurationのUserDataに処理を追加することで解決できます。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  LaunchConfiguration:&#xA;    Properties:&#xA;      IamInstanceProfile:&#xA;        Ref: EC2InstanceProfile&#xA;      ImageId: ...&#xA;      InstanceType: g4dn.xlarge&#xA;      SecurityGroups:&#xA;      - Ref: ...&#xA;      AssociatePublicIpAddress: true&#xA;      UserData:&#xA;        Fn::Base64: !Sub&#xA;          - |&#xA;            #!/bin/bash&#xA;            echo ECS_CLUSTER=${ClusterName} &amp;gt;&amp;gt; /etc/ecs/ecs.config&#xA;            (grep -q ^OPTIONS=\&amp;#34;--default-runtime /etc/sysconfig/docker &amp;amp;&amp;amp; echo &amp;#39;/etc/sysconfig/docker needs no changes&amp;#39;) || (sed -i &amp;#39;s/^OPTIONS=&amp;#34;/OPTIONS=&amp;#34;--default-runtime nvidia /&amp;#39; /etc/sysconfig/docker &amp;amp;&amp;amp; echo &amp;#39;/etc/sysconfig/docker updated to have nvidia runtime as default&amp;#39; &amp;amp;&amp;amp; systemctl restart docker &amp;amp;&amp;amp; echo &amp;#39;Restarted docker&amp;#39;)&#xA;          - {&#xA;              ClusterName: SampleCluster&#xA;            }&#xA;      KeyName: ...&#xA;    Type: AWS::AutoScaling::LaunchConfiguration&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この解決方法はどこかで見たものを利用したものですが、リンク先を失ってしまいました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
